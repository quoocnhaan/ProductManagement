/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.component.Order.Header;

import controller.DAO.BillsDAO;
import controller.DAO.GoodsReceiptDAO;
import controller.DAO.GoodsReceiptDetailDAO;
import controller.DAOImp.BillsDAOImp;
import controller.DAOImp.GoodsReceiptDAOImp;
import controller.DAOImp.GoodsReceiptDetailDAOImp;
import java.awt.Color;
import java.awt.FlowLayout;
import java.text.DecimalFormat;
import java.util.List;
import model.Bills;
import model.GoodsReceipt;
import model.GoodsReceiptDetail;
import org.hibernate.Session;
import util.HibernateUtil;
import view.component.CustomComponent.RoundedCard;

/**
 *
 * @author LENOVO
 */
public class Card_Component extends javax.swing.JPanel {

    private RoundedCard total;
    private RoundedCard revenue;
    private RoundedCard cancelled;
    private RoundedCard completed;
    private RoundedCard profit;

    private int totalValue = 0;
    private int cancelledValue = 0;
    private int completedValue = 0;
    private double profitValue = 0;
    private double revenueValue = 0;

    public Card_Component() {
        setLayout(new FlowLayout(FlowLayout.LEFT, 10, 10));
        setBackground(Color.WHITE);

        initData();
        addComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initData() {

        try (Session session = HibernateUtil.getSessionFactory().openSession()) {

            BillsDAO billsDAO = new BillsDAOImp(session);
            List<Bills> billses = billsDAO.getAll();

            for (Bills bill : billses) {
                if (bill.isStatus()) {
                    completedValue++;
                    revenueValue += bill.getTotal();
                    profitValue += bill.getProfit();
                } else {
                    cancelledValue++;
                }

            }
            totalValue = billses.size();

            total = new RoundedCard("Total Orders", totalValue + "");

            cancelled = new RoundedCard("Cancelled Orders", cancelledValue + "");

            completed = new RoundedCard("Completed Orders", completedValue + "");

            revenue = new RoundedCard("Revenue", formatPrice(revenueValue) + " VNĐ");

            profit = new RoundedCard("Profit", formatPrice(profitValue) + " VNĐ");

        } catch (Exception e) {
            System.out.println(e + getClass().getName());
        }
    }

    private void addComponents() {
        add(total);
        add(revenue);
        add(profit);
        add(completed);
        add(cancelled);
    }

    public void updateData() {
        cancelledValue = 0;
        completedValue = 0;
        profitValue = 0;
        revenueValue = 0;

        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            BillsDAO billsDAO = new BillsDAOImp(session);
            List<Bills> billses = billsDAO.getAll();

            for (Bills bill : billses) {
                if (bill.isStatus()) {
                    completedValue++;
                    revenueValue += bill.getTotal();
                    profitValue += bill.getProfit();
                } else {
                    cancelledValue++;
                }

            }

            totalValue = billses.size();
            total.updateValue(totalValue);
            completed.updateValue(completedValue);
            cancelled.updateValue(cancelledValue);
            revenue.updateValue(revenueValue);
            profit.updateValue(profitValue);

        } catch (Exception e) {
            System.out.println(e + getClass().getName());
        }
    }

    private String formatPrice(double priceValue) {
        if (priceValue == 0) {
            return "0";
        }
        DecimalFormat formatter = new DecimalFormat("#,###");
        return formatter.format(priceValue);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
