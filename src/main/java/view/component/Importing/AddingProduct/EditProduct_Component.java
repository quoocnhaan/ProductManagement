/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.component.Importing.AddingProduct;

import controller.DAO.BrandDAO;
import controller.DAO.ProductDAO;
import controller.DAOImp.BrandDAOImp;
import controller.DAOImp.ProductDAOImp;
import controller.Functional.Functional;
import controller.Session.SharedData;
import java.awt.Window;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.text.DecimalFormat;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import model.Brand;
import model.Product;
import org.hibernate.Session;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import util.HibernateUtil;
import view.component.CustomComponent.ImageLabel;
import view.component.CustomComponent.RoundedLabel;
import view.component.CustomComponent.RoundedTextArea;
import view.component.CustomComponent.RoundedTextField;
import view.component.Importing.Header.HeaderTitle_Component;
import view.component.Importing.Pagination.Pagination_Component;

/**
 *
 * @author PC
 */
public class EditProduct_Component extends javax.swing.JPanel {

    private HeaderTitle_Component parent;
    private Pagination_Component pagiantionParent;
    private Product product;

    public EditProduct_Component(Pagination_Component parent, Product product, JDialog parentFrame) {
        initComponents();
        this.pagiantionParent = parent;
        this.product = product;
        initData(product);
        initData();
        customComponents();
        addEvents();
        removeFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        contentPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        name = new RoundedTextField();
        jLabel4 = new javax.swing.JLabel();
        code = new RoundedTextField();
        jLabel5 = new javax.swing.JLabel();
        importPrice = new RoundedLabel("");
        jLabel6 = new javax.swing.JLabel();
        salePrice = new RoundedTextField();
        jLabel8 = new javax.swing.JLabel();
        brand = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        description = new RoundedTextArea();
        cancelBtn = new javax.swing.JButton();
        confirmBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        discount = new RoundedTextField();
        jLabel13 = new javax.swing.JLabel();
        quantity = new RoundedLabel("");
        jLabel17 = new javax.swing.JLabel();
        status = new RoundedLabel("");
        finalPrice = new RoundedLabel("");
        jLabel1 = new javax.swing.JLabel();
        imagePanel = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        img = new javax.swing.JLabel();
        uploadBtn = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        categoryPanel = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        type = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        gender = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(250, 250, 250));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        contentPanel.setBackground(new java.awt.Color(255, 255, 255));
        contentPanel.setPreferredSize(new java.awt.Dimension(748, 598));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("General Information");

        jLabel3.setFont(new java.awt.Font("Roboto", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Product Name");

        name.setBackground(new java.awt.Color(255, 255, 255));
        name.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        name.setForeground(new java.awt.Color(102, 102, 102));
        name.setText("Enter Product Name");

        jLabel4.setFont(new java.awt.Font("Roboto", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Product Code");

        code.setBackground(new java.awt.Color(255, 255, 255));
        code.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        code.setForeground(new java.awt.Color(102, 102, 102));
        code.setText("Enter Product Code");

        jLabel5.setFont(new java.awt.Font("Roboto", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Import Price");

        importPrice.setBackground(new java.awt.Color(255, 255, 255));
        importPrice.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        importPrice.setForeground(new java.awt.Color(102, 102, 102));
        importPrice.setText("100000");

        jLabel6.setFont(new java.awt.Font("Roboto", 1, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Sale Price");

        salePrice.setBackground(new java.awt.Color(255, 255, 255));
        salePrice.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        salePrice.setForeground(new java.awt.Color(102, 102, 102));
        salePrice.setText("0");

        jLabel8.setFont(new java.awt.Font("Roboto", 1, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("Brand");

        brand.setBackground(new java.awt.Color(255, 255, 255));
        brand.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        brand.setForeground(new java.awt.Color(102, 102, 102));

        jLabel11.setFont(new java.awt.Font("Roboto", 1, 16)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("Description");

        description.setBackground(new java.awt.Color(255, 255, 255));
        description.setColumns(20);
        description.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        description.setForeground(new java.awt.Color(102, 102, 102));
        description.setRows(5);
        jScrollPane1.setViewportView(description);
        jScrollPane1.setBorder(null);

        cancelBtn.setBackground(new java.awt.Color(255, 255, 255));
        cancelBtn.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        cancelBtn.setForeground(new java.awt.Color(51, 51, 51));
        cancelBtn.setText("Cancel");
        cancelBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        confirmBtn.setBackground(new java.awt.Color(0, 51, 255));
        confirmBtn.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        confirmBtn.setForeground(new java.awt.Color(255, 255, 255));
        confirmBtn.setText("Save");
        confirmBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        confirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmBtnActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Roboto", 1, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Final Price");

        jLabel10.setFont(new java.awt.Font("Roboto", 1, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("Discount");

        discount.setBackground(new java.awt.Color(255, 255, 255));
        discount.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        discount.setForeground(new java.awt.Color(102, 102, 102));
        discount.setText("100000");

        jLabel13.setFont(new java.awt.Font("Roboto", 1, 16)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(0, 0, 0));
        jLabel13.setText("Status");

        quantity.setBackground(new java.awt.Color(255, 255, 255));
        quantity.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        quantity.setForeground(new java.awt.Color(102, 102, 102));
        quantity.setText("100000");

        jLabel17.setFont(new java.awt.Font("Roboto", 1, 16)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 0, 0));
        jLabel17.setText("Quantity");

        status.setText("jLabel18");
        status.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N

        finalPrice.setText("jLabel19");
        finalPrice.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N

        javax.swing.GroupLayout contentPanelLayout = new javax.swing.GroupLayout(contentPanel);
        contentPanel.setLayout(contentPanelLayout);
        contentPanelLayout.setHorizontalGroup(
                contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(contentPanelLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(contentPanelLayout.createSequentialGroup()
                                                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(contentPanelLayout.createSequentialGroup()
                                                                .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addComponent(confirmBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, contentPanelLayout.createSequentialGroup()
                                                                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jLabel3))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                                                                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(code, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(jLabel4)))
                                                        .addComponent(jScrollPane1)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, contentPanelLayout.createSequentialGroup()
                                                                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                                .addComponent(importPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                                                                                .addComponent(jLabel5)
                                                                                .addComponent(jLabel7)
                                                                                .addComponent(finalPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                        .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                .addComponent(jLabel17)
                                                                                .addComponent(quantity, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(jLabel6)
                                                                        .addGroup(contentPanelLayout.createSequentialGroup()
                                                                                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                        .addComponent(salePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(jLabel8))
                                                                                .addGap(23, 23, 23)
                                                                                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                        .addComponent(jLabel10)
                                                                                        .addComponent(discount, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                        .addComponent(jLabel13)
                                                                        .addComponent(brand, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                                .addGap(17, 17, 17))
                                        .addGroup(contentPanelLayout.createSequentialGroup()
                                                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel11)
                                                        .addComponent(jLabel2))
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        contentPanelLayout.setVerticalGroup(
                contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(contentPanelLayout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(contentPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(code, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(contentPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addGap(28, 28, 28)
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(26, 26, 26)
                                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(contentPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(importPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(contentPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(salePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(contentPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel10)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(discount, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(26, 26, 26)
                                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(contentPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(brand, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(contentPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(finalPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(26, 26, 26)
                                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel17)
                                        .addComponent(jLabel13))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(quantity, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addGroup(contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(confirmBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(46, 46, 46))
        );

        jLabel1.setFont(new java.awt.Font("Roboto", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Product Details Infomation");

        imagePanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel12.setFont(new java.awt.Font("Roboto", 1, 16)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("Product Image");

        img.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/perfume4.png"))); // NOI18N

        uploadBtn.setBackground(new java.awt.Color(0, 0, 255));
        uploadBtn.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        uploadBtn.setForeground(new java.awt.Color(255, 255, 255));
        uploadBtn.setText("Upload");
        uploadBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        uploadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadBtnActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(102, 102, 102));
        jLabel14.setText("jLabel14");

        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
                imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(imagePanelLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(img, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel12)
                                        .addComponent(uploadBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        imagePanelLayout.setVerticalGroup(
                imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(imagePanelLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel12)
                                .addGroup(imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(imagePanelLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(img, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(imagePanelLayout.createSequentialGroup()
                                                .addGap(60, 60, 60)
                                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(uploadBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(34, Short.MAX_VALUE))
        );

        categoryPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel15.setFont(new java.awt.Font("Roboto", 1, 16)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 0, 0));
        jLabel15.setText("Category");

        jLabel16.setFont(new java.awt.Font("Roboto", 1, 16)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 0, 0));
        jLabel16.setText("Type");

        type.setBackground(new java.awt.Color(255, 255, 255));
        type.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        type.setForeground(new java.awt.Color(102, 102, 102));
        type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"10ml", "20ml", "30ml", "Full"}));

        jLabel9.setFont(new java.awt.Font("Roboto", 1, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("Gender");

        gender.setBackground(new java.awt.Color(255, 255, 255));
        gender.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        gender.setForeground(new java.awt.Color(102, 102, 102));
        gender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Men", "Women", "Unisex"}));

        javax.swing.GroupLayout categoryPanelLayout = new javax.swing.GroupLayout(categoryPanel);
        categoryPanel.setLayout(categoryPanelLayout);
        categoryPanelLayout.setHorizontalGroup(
                categoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(categoryPanelLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(categoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(gender, 0, 427, Short.MAX_VALUE)
                                        .addComponent(jLabel9)
                                        .addComponent(jLabel16)
                                        .addComponent(jLabel15)
                                        .addComponent(type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap(14, Short.MAX_VALUE))
        );
        categoryPanelLayout.setVerticalGroup(
                categoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(categoryPanelLayout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(jLabel15)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gender, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(41, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(contentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(imagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(categoryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addComponent(jLabel1))
                                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(categoryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(contentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 736, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(51, Short.MAX_VALUE))
        );
    }// </editor-fold>                                

    private void uploadBtnActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fileChooser = new JFileChooser();

        String desktopPath = System.getProperty("user.home") + File.separator + "Desktop";
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.addChoosableFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Image Files", "jpg", "png", "gif", "bmp"));
        fileChooser.setCurrentDirectory(new File(desktopPath));

        int returnValue = fileChooser.showOpenDialog(this);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();

            ImageIcon imageIcon = new ImageIcon(selectedFile.getAbsolutePath());

            img.setIcon(Functional.scaleImg(img, imageIcon));
        }
    }

    private void confirmBtnActionPerformed(java.awt.event.ActionEvent evt) {
        int option = JOptionPane.showConfirmDialog(this, "Do you want to save ?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION) {
            try (Session session = HibernateUtil.getSessionFactory().openSession()) {

                ProductDAO productDAO = new ProductDAOImp(session);
                BrandDAO brandDAO = new BrandDAOImp(session);

                // Validate product name
                String productName = name.getText().trim();
                if (productName == null || productName.isEmpty() || productName.equals("Enter Product Name")) {
                    JOptionPane.showMessageDialog(this, "Please enter a valid Product Name!");
                    return;
                }

                // Validate product code
                String productCode = code.getText().trim();
                if (productCode == null || productCode.isEmpty() || productCode.equals("Enter Product Code")) {
                    JOptionPane.showMessageDialog(this, "Please enter a valid Product Code!");
                    return;
                }

                // Validate brand
                String brandString = this.brand.getSelectedItem() != null ? this.brand.getSelectedItem().toString() : "";
                if (brandString.isBlank()) {
                    JOptionPane.showMessageDialog(this, "Please select a valid Product Brand!");
                    return;
                }

                Brand brand = brandDAO.getByName(brandString);
                if (brand == null) {
                    brand = new Brand(brandString, true);
                    brandDAO.add(brand);
                }

                // Validate price
                double price = Double.parseDouble(this.salePrice.getText().replace(",", ""));

                // Validate discount
                double discount = Double.parseDouble(this.discount.getText());

                // Validate type selection
                int type = this.type.getSelectedIndex() + 1;
                if (type <= 0) {
                    JOptionPane.showMessageDialog(this, "Please select a valid Product Type!");
                    return;
                }

                // Validate gender selection
                int gender = this.gender.getSelectedIndex() + 1;
                if (gender <= 0) {
                    JOptionPane.showMessageDialog(this, "Please select a valid Gender!");
                    return;
                }

                // Validate status selection
                boolean productStatus = status.getText().trim().equals("In-Stock");

                // Validate description
                String description = this.description.getText().trim();
                if (description == null || description.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Please enter a valid Product Description!");
                    return;
                }

                // Validate image
                ImageIcon newImg = (ImageIcon) img.getIcon();
                byte[] imgByte = Functional.convertIconToByteArray(newImg);
                if (imgByte == null || imgByte.length == 0) {
                    JOptionPane.showMessageDialog(this, "Please upload a valid image!");
                    return;
                }

                // Update existing product
                product.setName(productName);
                product.setCode(productCode);
                product.setBrand(brand);
                product.setDiscount(discount);
                product.setGender(gender);
                product.setImg(imgByte);
                product.setPrice(price);
                product.setDescription(description);
                product.setProductStatus(productStatus);
                product.setType(type);
                product.setStatus(true);
                productDAO.update(product);
                pagiantionParent.resetDataWhenEdit();
                close();

            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Invalid Input! Please check your data and try again.");
                JOptionPane.showMessageDialog(this, e);
            }
        }
    }

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {
        int option = JOptionPane.showConfirmDialog(this, "Do you want to cancel?", "Confirm", JOptionPane.YES_NO_OPTION);

        if (option == JOptionPane.YES_OPTION) {
            close();
        }
    }

    private void formMouseClicked(java.awt.event.MouseEvent evt) {
        this.requestFocusInWindow();

    }

    private void initData() {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            BrandDAO brandDAO = new BrandDAOImp(session);

            List<Brand> items = brandDAO.getAll();

            for (Brand item : items) {
                brand.addItem(item.getName());
            }
        } catch (Exception e) {
        }
        String text = "<html>Please upload an image with a resolution of 180x180 or close to it for the best image quality.</html>";
        jLabel14.setText(text);
    }

    private void initData(Product product) {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            BrandDAO brandDAO = new BrandDAOImp(session);
            ProductDAO productDAO = new ProductDAOImp(session);

            List<Brand> items = brandDAO.getAll();

            for (Brand item : items) {
                brand.addItem(item.getName());
            }

            // Check if product name is not null or empty before setting
            if (product.getName() != null && !product.getName().isEmpty()) {
                name.setText(product.getName());
            } else {
                name.setText("N/A");
            }

            // Check if product code is not null or empty before setting
            if (product.getCode() != null && !product.getCode().isEmpty()) {
                code.setText(product.getCode());
            } else {
                code.setText("N/A");
            }

            // Check if product price is valid
            if (product.getPrice() != 0) {
                salePrice.setText(formatPrice(product.getPrice()));
            } else {
                salePrice.setText("N/A");
            }

            // Check if discount is valid
            if (product.getDiscount() != 0) {
                discount.setText(String.valueOf(product.getDiscount()));
            } else {
                discount.setText("0");
            }

            importPrice.setText("   " + formatPrice(product.getImportPrice()));

            // Calculate final price
            double finalPriceValue = product.getPrice() * (1 - product.getDiscount() / 100.0);
            finalPrice.setText("   " + formatPrice(finalPriceValue));

            // Check if quantity is valid
            if (product.getAmount() != 0) {
                quantity.setText("   " + String.valueOf(product.getAmount()));
            } else {
                quantity.setText("0");
            }

            // Check if brand name is not null or empty before selecting
            if (product.getBrand() != null && product.getBrand().getName() != null && !product.getBrand().getName().isEmpty()) {
                brand.setSelectedItem(product.getBrand().getName());
            }

            // Check product status
            String statusStr = product.getProductStatus() ? "In-Stock" : "Out-of-Stock";

            status.setText("   " + statusStr);

            // Check if description is not null or empty before setting
            if (product.getDescription() != null && !product.getDescription().isEmpty()) {
                description.setText(product.getDescription());
            } else {
                description.setText("No description available");
            }

            // Check if image is not null before setting icon
            if (product.getImg() != null) {
                img.setIcon(Functional.convertByteArrayToIcon(product.getImg()));
            } else {
                img.setIcon(null); // Set a default or null icon
            }

            // Check if type is valid before setting
            if (product.getType() != 0) {
                type.setSelectedIndex(product.getType() - 1);
            }

            // Check if gender is valid before setting
            if (product.getGender() != 0) {
                gender.setSelectedIndex(product.getGender() - 1);
            }

        } catch (Exception e) {
            System.out.println(e + getClass().getName());
        }

        // Set label for image upload instructions
        String text = "<html>Please upload an image with a resolution of 180x180 or close to it for the best image quality.</html>";
        jLabel14.setText(text);
    }

    private String formatPrice(double priceValue) {
        DecimalFormat formatter = new DecimalFormat("#,###");
        return formatter.format(priceValue);
    }

    private void customComponents() {
        customJComboBox();
    }

    private void close() {
        Window parentWindow = SwingUtilities.getWindowAncestor(this);
        if (parentWindow != null) {
            parentWindow.dispose();
        }
    }

    private void computeFinalPrice() {
        try {
            // Assuming price and discount are JTextFields or similar input fields
            double originalPrice = Double.parseDouble(salePrice.getText().replace(",", ""));
            double discountValue = Double.parseDouble(discount.getText());

            // Compute the final price after applying the discount
            double finalPriceValue = originalPrice * (1 - discountValue / 100.0);

            // Format the final price and set it in the finalPrice JTextField/JLabel
            finalPrice.setText("   " + formatPrice(finalPriceValue));

        } catch (NumberFormatException e) {
            // Handle invalid input (e.g., if price or discount is not a valid number)
            System.out.println(e + e.getClass().getName());
        }
    }

    private void removeFocus() {
        this.addAncestorListener(new javax.swing.event.AncestorListener() {
            @Override
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formMouseClicked(null);
            }

            @Override
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }

            @Override
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
        });
    }

    private void customJComboBox() {
        brand.setMaximumRowCount(7);
        brand.setEditable(true);
        AutoCompleteDecorator.decorate(brand);

        brand.getEditor().getEditorComponent().addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    brand.getParent().requestFocusInWindow();
                }
            }
        });

        JTextField editor = (JTextField) brand.getEditor().getEditorComponent();

        editor.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                checkForMatchingResult();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                checkForMatchingResult();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                checkForMatchingResult();
            }

            private void checkForMatchingResult() {
                String input = editor.getText();
                boolean matchFound = false;

                if (input.isBlank()) {
                    brand.hidePopup();
                    return;
                }

                for (int i = 0; i < brand.getItemCount(); i++) {
                    if (brand.getItemAt(i).toString().toLowerCase().startsWith(input.toLowerCase())) {
                        matchFound = true;
                        break;
                    }
                }

                if (matchFound) {
                    brand.showPopup();
                } else {
                    brand.hidePopup();
                }
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JComboBox<String> brand;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JPanel categoryPanel;
    private RoundedTextField code;
    private javax.swing.JButton confirmBtn;
    private javax.swing.JPanel contentPanel;
    private RoundedTextArea description;
    private RoundedTextField discount;
    private RoundedLabel finalPrice;
    private javax.swing.JComboBox<String> gender;
    private javax.swing.JPanel imagePanel;
    private javax.swing.JLabel img;
    private RoundedLabel importPrice;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private RoundedTextField name;
    private RoundedLabel quantity;
    private RoundedTextField salePrice;
    private RoundedLabel status;
    private javax.swing.JComboBox<String> type;
    private javax.swing.JButton uploadBtn;
    // End of variables declaration                   

    private void addEvents() {

        salePrice.setInputVerifier(new InputVerifier() {
            @Override
            public boolean verify(JComponent input) {
                String text = ((JTextField) input).getText().replace(",", "");
                try {
                    double value = Double.parseDouble(text);

                    // Adjust value if it's out of bounds
                    if (value < 10000) {
                        ((JTextField) input).setText(formatPrice(10000));
                        return true;
                    }
                    ((JTextField) input).setText(formatPrice(value));
                } catch (NumberFormatException e) {
                    // If it's not a valid number, set the field to 1
                    ((JTextField) input).setText(formatPrice(10000));
                }
                computeFinalPrice();
                return true;
            }
        });

        discount.setInputVerifier(new InputVerifier() {
            @Override
            public boolean verify(JComponent input) {
                String text = ((JTextField) input).getText().replace(",", "");
                try {
                    double value = Double.parseDouble(text);

                    // Adjust value if it's out of bounds
                    if (value < 0) {
                        ((JTextField) input).setText(formatPrice(0));
                        return true;
                    } else if (value > 100) {
                        ((JTextField) input).setText(formatPrice(100));
                        return true;
                    }
                    ((JTextField) input).setText(formatPrice(value));
                } catch (NumberFormatException e) {
                    // If it's not a valid number, set the field to 1
                    ((JTextField) input).setText(formatPrice(0));
                }
                computeFinalPrice();
                return true;
            }
        });
    }

}
