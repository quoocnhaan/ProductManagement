/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.component.Importing.ImportProduct.ImportProductDetails.Product_Component;

import controller.DAO.GoodsReceiptDAO;
import controller.DAO.GoodsReceiptDetailDAO;
import controller.DAO.InventoryDAO;
import controller.DAO.InventoryDetailDAO;
import controller.DAO.ProductDAO;
import controller.DAOImp.GoodsReceiptDAOImp;
import controller.DAOImp.GoodsReceiptDetailDAOImp;
import controller.DAOImp.InventoryDAOImp;
import controller.DAOImp.InventoryDetailDAOImp;
import controller.DAOImp.ProductDAOImp;
import controller.Session.SharedData;
import java.awt.GridLayout;
import java.awt.event.ActionListener;
import java.sql.Date;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import model.GoodsReceipt;
import model.GoodsReceiptDetail;
import model.Inventory;
import model.InventoryDetail;
import model.Product;
import org.hibernate.Session;
import util.HibernateUtil;
import view.component.Importing.ImportProduct.ImportProductDetails.ImportProductPage_Component;

/**
 *
 * @author PC
 */
public class ProductList_Component extends javax.swing.JPanel {
    
    private List<Product_Component> list = new ArrayList<>();
    private ImportProductPage_Component parent;
    private GoodsReceipt goodsReceipt;
    
    public ProductList_Component(ImportProductPage_Component parent) {
        initComponents();
        this.parent = parent;
        setLayout(new GridLayout(0, 1, 0, 10));
    }
    
    public ProductList_Component(ImportProductPage_Component parent, GoodsReceipt goodsReceipt) {
        initComponents();
        this.parent = parent;
        this.goodsReceipt = goodsReceipt;
        setLayout(new GridLayout(0, 1, 0, 10));
        initData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1030, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void addNewProduct(Product newProduct) {
        Product_Component product_Component = new Product_Component(newProduct, this);
        list.add(product_Component);
        add(product_Component);
//        repaint();
//        revalidate();
    }
    
    void updateTotal(double quantityValue) {
        parent.updateTotal(quantityValue);
    }
    
    public void removeProduct(Product_Component product_Component) {
        list.remove(product_Component);
        System.out.println("remove " + product_Component.getProduct().getName() + " from list");
        remove(product_Component);
        repaint();
        revalidate();
        parent.updateTotal(-product_Component.getTotalValue());
    }
    
    private void initData() {
        Session session = HibernateUtil.getSessionFactory().openSession();
        
        GoodsReceiptDetailDAO goodsReceiptDetailDAO = new GoodsReceiptDetailDAOImp(session);
        List<GoodsReceiptDetail> list = goodsReceiptDetailDAO.findAllByGoodsReceipt(goodsReceipt);
        
        for (GoodsReceiptDetail goodsReceiptDetail : list) {
            addNewProduct(goodsReceiptDetail.getProduct(), goodsReceiptDetail.getAmount());
            SharedData.browsedProduct.add(goodsReceiptDetail.getProduct());
        }
        session.close();
    }
    
    private void addNewProduct(Product product, int amount) {
        Product_Component product_Component = new Product_Component(product, this, amount);
        list.add(product_Component);
        add(product_Component);
        repaint();
        revalidate();
    }
    
    public void updateImportProducts(GoodsReceipt goodsReceipt, double deliveryFree, double discount, double otherDiscount, double totalPrice) {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            int quantity = 0;
            int inventoryQuantity = 0;
            
            Date today = Date.valueOf(LocalDate.now());
            
            ProductDAO productDAO = new ProductDAOImp(session);
            
            GoodsReceiptDetailDAO goodsReceiptDetailDAO = new GoodsReceiptDetailDAOImp(session);
            GoodsReceiptDAO goodsReceiptDAO = new GoodsReceiptDAOImp(session);
            
            InventoryDAO inventoryDAO = new InventoryDAOImp(session);
            InventoryDetailDAO inventoryDetailDAO = new InventoryDetailDAOImp(session);
            
            Inventory inventory = inventoryDAO.findByDate(today);
            
            List<GoodsReceiptDetail> details = goodsReceiptDetailDAO.findAllByGoodsReceipt(goodsReceipt);
            //InventoryDetail inventoryDetail = null;

            // Get quantity in each component in this.list
            outer:
            for (Product_Component product_Component : list) {
                for (GoodsReceiptDetail detail : details) {

                    //if product in list already existed in GoodsReceipt -> it means we update some value
                    if (detail.getProduct().getId() == product_Component.getProduct().getId()) {
                        int amount = Integer.parseInt(product_Component.getQuantity());
                        quantity += amount;
                        int diff = detail.getAmount() - amount;
                        inventoryQuantity += diff;
                        detail.setAmount(amount);
                        detail.setTotal(detail.getProduct().getImportPrice() * amount);
                        
                        int prevAmount = detail.getProduct().getAmount();
                        detail.getProduct().setAmount(prevAmount - diff);

                        // Get the existing inventory detail for the product and update it
                        InventoryDetail inventoryDetail = inventoryDetailDAO.findByProduct(detail.getProduct().getId(), today);
                        
                        if (inventoryDetail != null) {
                            inventoryDetail.setAmountEnd(inventoryDetail.getAmountEnd() - diff);
                            inventoryDetail.setAmountStart(inventoryDetail.getAmountStart() - diff);
                            inventoryDetail.setPrice(inventoryDetail.getProduct().getPrice() * inventoryDetail.getAmountEnd());
                            inventoryDetailDAO.update(inventoryDetail);
                        }
                        continue outer;
                    }
                }

                //if product in list did not exist in GoodsReceipt -> we create a new product
                int newQuantity = Integer.parseInt(product_Component.getQuantity());
                quantity += newQuantity;
                inventoryQuantity -= newQuantity; // because new products are added in database -> inventory amount has been increased

                Product existingpPoduct = productDAO.getByCodeAndPrice(product_Component.getProduct().getCode(), product_Component.getImportPriceValue());

                // if we create a new product in GoodsReceipt but this product already exist in the databse -> update data
                if (existingpPoduct != null) {
                    existingpPoduct.setAmount(existingpPoduct.getAmount() + newQuantity);
                    productDAO.update(existingpPoduct);
                    
                    InventoryDetail existingInventoryDetail = inventoryDetailDAO.findByProduct(existingpPoduct.getId(), today);
                    existingInventoryDetail.setAmountEnd(existingInventoryDetail.getAmountEnd() + newQuantity);
                    existingInventoryDetail.setAmountStart(existingInventoryDetail.getAmountStart() + newQuantity);
                    existingInventoryDetail.setPrice(existingInventoryDetail.getAmountEnd() * product_Component.getImportPriceValue());
                    inventoryDetailDAO.update(existingInventoryDetail);
                    
                    GoodsReceiptDetail goodsReceiptDetail = new GoodsReceiptDetail(goodsReceipt, existingpPoduct, newQuantity, newQuantity * existingpPoduct.getImportPrice(), true);
                    goodsReceiptDetailDAO.add(goodsReceiptDetail);

                    // if we create a new product in GoodsReceipt but this product did not exist in the databse -> create a new product
                } else {
                    Product product = product_Component.getProduct();
                    product.setAmount(newQuantity);
                    productDAO.add(product);
                    
                    InventoryDetail newInventoryDetail = new InventoryDetail();
                    newInventoryDetail.setAmountEnd(newQuantity);
                    newInventoryDetail.setAmountStart(newQuantity);
                    newInventoryDetail.setPrice(newQuantity * product_Component.getImportPriceValue());
                    newInventoryDetail.setProduct(product);
                    newInventoryDetail.setInventory(inventory);
                    newInventoryDetail.setStatus(true);
                    inventoryDetailDAO.add(newInventoryDetail);
                    
                    GoodsReceiptDetail goodsReceiptDetail = new GoodsReceiptDetail(goodsReceipt, product, newQuantity, newQuantity * product.getImportPrice(), true);
                    goodsReceiptDetailDAO.add(goodsReceiptDetail);
                    
                }
            }

            // in this for-each, we check products have been removed in the list -> so we have to remove them in goodsReceipt as well
            for (GoodsReceiptDetail detail : details) {
                // Check for deleted products and update inventory
                for (Product prod : SharedData.deletedProductInImport.keySet()) {
                    if (prod.getId() == detail.getProduct().getId()) {
                        System.out.println("delete " + prod.getName() + " from Importing");
                        int amount = SharedData.deletedProductInImport.get(prod);
                        inventoryQuantity += amount;
                        
                        int prevAmount = detail.getProduct().getAmount();
                        detail.getProduct().setAmount(prevAmount - amount);

                        // Delete the inventory detail if it exists
                        InventoryDetail newInventoryDetail = inventoryDetailDAO.findByProduct(detail.getProduct().getId(), today);
                        if (newInventoryDetail != null) {
                            newInventoryDetail.setAmountEnd(newInventoryDetail.getAmountEnd() - amount);
                            newInventoryDetail.setAmountStart(newInventoryDetail.getAmountStart() - amount);
                            newInventoryDetail.setPrice(newInventoryDetail.getProduct().getPrice() * newInventoryDetail.getAmountEnd());
                            inventoryDetailDAO.update(newInventoryDetail);
                        }
                        goodsReceiptDetailDAO.delete(detail.getId());
                    }
                }
                // Update the goods receipt detail
                goodsReceiptDetailDAO.update(detail);
            }

            // Update the inventory
            inventory.setAmount(inventoryDetailDAO.getTotalAmountEndByInventory(inventory));
            inventoryDAO.update(inventory);

            // Update the goods receipt
            GoodsReceipt curGoodsReceipt = goodsReceiptDAO.get(goodsReceipt.getId());
            
            curGoodsReceipt.setAmount(quantity);
            curGoodsReceipt.setDelivertyFee(deliveryFree);
            curGoodsReceipt.setDiscount(discount);
            curGoodsReceipt.setOtherDiscount(otherDiscount);
            curGoodsReceipt.setTotalPrices(totalPrice);
            
            goodsReceiptDAO.update(curGoodsReceipt);
            SharedData.deletedProductInImport.clear();
        } catch (Exception e) {
            System.out.println(e + getClass().getName());
        }
    }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

