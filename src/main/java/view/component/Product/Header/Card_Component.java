/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.component.Product.Header;

import controller.DAO.ProductDAO;
import controller.DAOImp.ProductDAOImp;
import java.awt.Color;
import java.awt.FlowLayout;
import java.util.List;
import model.Product;
import org.hibernate.Session;
import util.HibernateUtil;
import view.component.CustomComponent.RoundedCard;

/**
 *
 * @author LENOVO
 */
public class Card_Component extends javax.swing.JPanel {
    
    private RoundedCard total;
    private RoundedCard sold;
    private RoundedCard inStock;
    private RoundedCard outStock;
    private RoundedCard quantity;
    private int totalValue;
    private int quantityValue;
    private int inStockValue = 0;
    private int outStockValue = 0;
    private int soldValue;
    
    public Card_Component() {
        setLayout(new FlowLayout(FlowLayout.LEFT, 10, 10));
        setBackground(Color.WHITE);
        
        initData();
        addComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initData() {
        soldValue = 0;
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            ProductDAO productDAO = new ProductDAOImp(session);
            List<Product> products = productDAO.getAll();
            
            for (Product product : products) {
                if (product.getProductStatus()) {
                    inStockValue++;
                    quantityValue += product.getAmount();
                } else {
                    outStockValue++;
                }
            }
            totalValue = products.size();
            total = new RoundedCard("Total Products", totalValue + "");
            sold = new RoundedCard("Products Sold", soldValue + "");
            inStock = new RoundedCard("In-Stock Products", inStockValue + "");
            outStock = new RoundedCard("Out-of-Stock Products", outStockValue + "");
            quantity = new RoundedCard("Total Quantity", quantityValue + "");
            
        } catch (Exception e) {
            System.out.println(e + getClass().getName());
        }
    }
    
    private void addComponents() {
        add(total);
        add(sold);
        add(inStock);
        add(outStock);
        add(quantity);
    }
    
    public void updateTotal(int quantity) {
        totalValue++;
        inStockValue++;
        quantityValue += quantity;
        total.updateValue(totalValue);
        inStock.updateValue(inStockValue);
        this.quantity.updateValue(quantityValue);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
