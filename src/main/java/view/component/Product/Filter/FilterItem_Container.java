/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.component.Product.Filter;

import controller.DAO.BrandDAO;
import controller.DAOImp.BrandDAOImp;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import model.Brand;
import org.hibernate.Session;
import util.HibernateUtil;

/**
 *
 * @author PC
 */
public class FilterItem_Container extends javax.swing.JPanel {

    private List<FilterItem> list;
    private FilterItem brand;
    private FilterItem type;
    private FilterItem gender;
    private FilterItem price;

    public FilterItem_Container() {
        initComponents();
        setLayout(new GridLayout(0, 1, 10, 10));
        initData();
        addComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initData() {
        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
            BrandDAO brandDAO = new BrandDAOImp(session);
            List<Brand> brands = brandDAO.getAll();

            List<String> brandNames = brands.stream()
                    .map(Brand::getName)
                    .collect(Collectors.toList());

            brand = new FilterItem("Brands", brandNames);

            List<String> types = Arrays.asList("10ml", "20ml", "30ml", "Full");
            type = new FilterItem("Types", types);

            List<String> genders = Arrays.asList("Men", "Women", "Unisex");
            gender = new FilterItem("Genders", genders);

            List<String> prices = Arrays.asList("<500k", "500k-2000k", "2000k-4000k", ">4000k");
            price = new FilterItem("Prices", prices);

        } catch (Exception e) {
            System.out.println(e + getClass().getName());
        }
    }

    private void addComponents() {
        list = new ArrayList<>();
        add(brand);
        add(type);
        add(gender);
        add(price);

        list.add(brand);
        list.add(type);
        list.add(gender);
        list.add(price);
    }

    public List<FilterItem> getAll() {
        return list;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
