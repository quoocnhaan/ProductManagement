/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.component.Product.Product_Component;

import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import view.component.Product.Feature.ProductName_Component;
import view.component.Product.Feature.SubFeature_Component;

/**
 *
 * @author PC
 */
public class Product_Component extends javax.swing.JPanel {

    /**
     * Creates new form Product_Component
     */
    public Product_Component() {
        initComponents();
        setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));
        addComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1100, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 72, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        changeColor(true);
    }//GEN-LAST:event_formMouseEntered

    private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited
        changeColor(false);
    }//GEN-LAST:event_formMouseExited

    private void addComponents() {

        ProductName_Component productName = new ProductName_Component();
        productName.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent evt) {
                formMouseEntered(evt);
            }

            @Override
            public void mouseExited(MouseEvent evt) {
                formMouseExited(evt);
            }

            @Override
            public void mouseClicked(MouseEvent evt) {
                childMouseClicked(evt);  // Print when ProductName_Component is clicked
            }
        });
        add(productName);

        for (int i = 1; i <= 6; i++) {
            SubFeature_Component subFeature = new SubFeature_Component();

            subFeature.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseEntered(MouseEvent evt) {
                    formMouseEntered(evt);
                }

                @Override
                public void mouseExited(MouseEvent evt) {
                    formMouseExited(evt);
                }

                @Override
                public void mouseClicked(MouseEvent evt) {
                    childMouseClicked(evt);
                }
            });
            add(subFeature);
        }
    }

    public void changeColor(boolean isInside) {
        Color newColor = isInside ? new Color(233, 228, 244) : Color.WHITE;

        // Change the background of the Product_Component
        setBackground(newColor);

        // Iterate over all child components and change their background
        Component[] components = getComponents();
        for (Component component : components) {
            component.setBackground(newColor);
        }
        // Repaint the panel to ensure the new background is applied
        repaint();
    }

    private void childMouseClicked(MouseEvent evt) {
        System.out.println("Child component clicked: " + evt.getSource().getClass().getSimpleName());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
